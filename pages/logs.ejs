<!-- ////////////////// - PARTIALS - ////////////////// -->

<%- include('partials/socket.ejs') %>
    <%- include('partials/header.ejs') %>
        <%- include('partials/messageModals.ejs') %>
            <%- include('partials/navigation.ejs') %>

                &nbsp;
                <br>

                <hr class="divider">

                <style>
                    .log-year button,
                    .log-month button,
                    .log-button {
                        background: none;
                        border: none;
                        color: var(--links-color);
                        cursor: pointer;
                        padding: 0;
                        margin-left: 10px;
                        transition: color 0.5s ease;
                        font-size: 18px;
                        text-align: left;
                        transition: all 0.3s ease;
                    }

                    .log-year button:hover,
                    .log-month button:hover,
                    .log-button:hover {
                        text-decoration: underline;
                    }

                    .logs-container {
                        margin-left: 30px;
                        text-align: left;
                        transition: all 0.3s ease;
                    }

                    .log-year,
                    .log-month {
                        transition: all 0.5s cubic-bezier(0, 1, 0, 1);
                    }

                    .log-year .logs-container,
                    .log-month .logs-container {
                        max-height: 0;
                        transition: all 0.5s cubic-bezier(0, 1, 0, 1);
                        opacity: 0;
                        overflow: hidden;
                    }

                    .hidden {
                        display: none;
                        visibility: hidden;
                    }


                    .log-year .logs-container.open,
                    .log-month .logs-container.open {
                        max-height: 800px;
                        transition: all 1s ease-in-out;
                        opacity: 1;
                    }

                    .log-year-container,
                    .log-month-container {
                        max-height: 0;
                        transition: all 0.5s cubic-bezier(0, 1, 0, 1);
                        opacity: 0;
                        overflow: hidden;
                    }

                    .log-year-container.open,
                    .log-month-container.open {
                        max-height: 800px;
                        transition: all 1s ease-in-out;
                        opacity: 1;
                    }


                    .arrow {
                        transition: transform 0.3s ease-in-out;
                        display: inline-block;
                        transform-origin: center;
                        font-size: 0.8em;
                        /* Adjust this value as needed */
                        vertical-align: middle;
                    }

                    .rotate {
                        transform: rotate(90deg);
                    }

                    .log-button {
                        transition: all 0.3s ease-in-out;
                    }

                    .material-symbols-outlined {
                        vertical-align: middle;
                        font-family: 'Material Icons';
                        font-weight: normal;
                        font-style: normal;
                        font-size: 20px;
                        display: inline-block;
                        line-height: 1;
                        text-transform: none;
                        letter-spacing: normal;
                        word-wrap: normal;
                        white-space: nowrap;
                        direction: ltr;
                        -webkit-font-smoothing: antialiased;
                        transition: all 0.3s ease-in-out;
                    }

                    .material-symbols-outlined:hover {
                        color: var(--links-hover-color);
                    }
                </style>

                <greet>Logs</greet>

                <br><br><br>

                <div class="logs-container">
                    <% logs.forEach((logYear, yearIndex)=> { %>
                        <div class="log-year" id="year<%= yearIndex %>">
                            <button onclick="toggleLogsContainer(this, 'year<%= yearIndex %>')">
                                <span class="arrow">▶</span>
                                <%= logYear.year %>
                            </button>
                            <!-- Add Download Button for Year Folder -->
                            <button class="log-button"
                                onclick="downloadYearLogs('<%= logYear.year %>', '<%= JSON.stringify(logYear.months) %>')">
                                <i class="material-symbols-outlined">get_app</i>
                            </button>
                            <!-- Add Delete Button for Year Folder -->
                            <button class="log-button" onclick="deleteYearLogs('<%= logYear.year %>')">
                                <i class="material-symbols-outlined">close</i>
                            </button>
                            <div class="log-year-container">
                                <% logYear.months.forEach((logMonth, monthIndex)=> { %>
                                    <div class="log-month" id="month<%= monthIndex %>">
                                        <button onclick="toggleLogsContainer(this, 'month<%= monthIndex %>')">
                                            <span class="arrow">▶</span>
                                            <%= logMonth.month %>
                                        </button>
                                        <!-- Add Download Button for Month Folder -->
                                        <button class="log-button"
                                            onclick="downloadMonthLogs('<%= logYear.year %>', '<%= logMonth.month %>', '<%= JSON.stringify(logMonth.logs) %>')">
                                            <i class="material-symbols-outlined">get_app</i>
                                        </button>
                                        <!-- Add Delete Button for Month Folder -->
                                        <button class="log-button"
                                            onclick="deleteMonthLogs('<%= logYear.year %>', '<%= logMonth.month %>')">
                                            <i class="material-symbols-outlined">close</i>
                                        </button>
                                        <div class="log-month-container">
                                            <% logMonth.logs.forEach(logFile=> { %>
                                                <div class="log-day">
                                                    <button class="log-button"
                                                        onclick="fetchLogContent('<%= logYear.year %>', '<%= logMonth.month %>', '<%= logFile %>')">
                                                        <%= logFile %>
                                                    </button>
                                                    <!-- Add Download Button for Daily Logs -->
                                                    <button class="log-button"
                                                        onclick="downloadLogFile('<%= logYear.year %>', '<%= logMonth.month %>', '<%= logFile %>')">
                                                        <i class="material-symbols-outlined">get_app</i>
                                                    </button>
                                                    <!-- Add Delete Button for Daily Logs -->
                                                    <button class="log-button"
                                                        onclick="deleteLogFile('<%= logYear.year %>', '<%= logMonth.month %>', '<%= logFile %>')">
                                                        <i class="material-symbols-outlined">close</i>
                                                    </button>
                                                </div>
                                                <% }); %>
                                        </div>
                                    </div>
                                    <% }); %>
                            </div>
                        </div>
                        <% }); %>
                </div>


                <script>
                    const toggleLogsContainer = (button, id) => {
                        const logsContainer = button.parentElement.querySelector('.log-year-container') || button.parentElement.querySelector('.log-month-container');
                        const arrow = button.querySelector('.arrow');
                        const isOpen = logsContainer.classList.toggle('open');
                        arrow.classList.toggle('rotate');
                        saveMenuState();
                    }

                    const saveMenuState = () => {
                        const menuState = {};
                        const logContainers = document.querySelectorAll('.log-year-container, .log-month-container');
                        logContainers.forEach(container => {
                            const id = container.parentElement.id;
                            const isOpen = container.classList.contains('open');
                            menuState[id] = isOpen;
                        });
                        localStorage.setItem('menuState', JSON.stringify(menuState));
                    }

                    const loadMenuState = () => {
                        const menuState = JSON.parse(localStorage.getItem('menuState'));
                        if (menuState) {
                            for (const id in menuState) {
                                const isOpen = menuState[id];
                                const container = document.getElementById(id);
                                if (isOpen) {
                                    container.querySelector('.arrow').classList.add('rotate');
                                    container.querySelector('.log-year-container, .log-month-container').classList.add('open');
                                }
                            }
                        }
                    }

                    window.addEventListener('DOMContentLoaded', () => {
                        loadMenuState();
                    });



                    const fetchLogContent = async (year, month, day) => {
                        try {
                            const response = await fetch(`/logs/${year}/${month}/${day}`);
                            const data = await response.json();

                            let params = 'toolbar=no, popup=yes, directories=no, titlebar=no, toolbar=no, location=no, status=no, menubar=no, scrollbars=no, resizable=no,width=750,height=450,left=100,top=100';
                            let logWindow = window.open('', '', params);

                            logWindow.document.write(`
                                <!DOCTYPE html>
                                <html>
                                <head>
                                    <title>Log: ${year}/${month}/${day}</title>
                                    <style>
                                        body {
                                            background-color: black;
                                            color: white;
                                        }
                                        pre {
                                            white-space: pre-wrap; 
                                            white-space: -moz-pre-wrap; 
                                            white-space: -pre-wrap; 
                                            white-space: -o-pre-wrap;
                                            word-wrap: break-word; 
                                        }

                                        span {
                                            font-family:'Courier New', Courier, monospace;
                                            font-size: 12px;
                                        }
                                    </style>
                                </head>
                                <body>
                                    <span>File > ${day}<br></span>
                                    <pre>${data.data}</pre>
                                </body>
                                </html>
                            `);

                            logWindow.document.close();
                        } catch (error) {
                            console.error("Error fetching log content:", error);
                        }
                    }

                    const downloadLogFile = (year, month, day) => {
                        // Create a link and programmatically click it to initiate download
                        const link = document.createElement('a');
                        link.href = `/logs/${year}/${month}/${day}/download`;
                        link.download = `${year}-${month}-${day}.log`;
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    }

                    const deleteLogFile = async (year, month, day) => {
                        try {
                            const response = await fetch(`/logs/${year}/${month}/${day}`, { method: 'DELETE' });
                            if (response.ok) {
                                console.log('Log file successfully deleted');
                                // Reload the page or remove the deleted item from DOM
                                location.reload();
                            }
                        } catch (error) {
                            console.error("Error deleting log file:", error);
                        }
                    }

                    const downloadMonthLogs = async (year, month) => {
                        try {
                            // Send an AJAX request to initiate download
                            const response = await fetch(`/logs/${year}/${month}/download`, { method: 'GET' });
                            if (!response.ok) {
                                throw new Error('Download failed');
                            }

                            const blob = await response.blob();
                            const url = window.URL.createObjectURL(blob);
                            const a = document.createElement('a');
                            a.href = url;
                            a.target = '_blank';
                            a.download = `${year}-${month}-logs.zip`;
                            document.body.appendChild(a);
                            a.click();
                            a.remove();
                        } catch (error) {
                            console.error('Error during download:', error);
                            // Handle the error (e.g., display an error message to the user)
                        }
                    };

                    const downloadYearLogs = async (year) => {
                        try {
                            // Send an AJAX request to initiate download
                            const response = await fetch(`/logs/${year}/download`, { method: 'GET' });
                            if (!response.ok) {
                                throw new Error('Download failed');
                            }

                            const blob = await response.blob();
                            const url = window.URL.createObjectURL(blob);
                            const a = document.createElement('a');
                            a.href = url;
                            a.target = '_blank';
                            a.download = `${year}-logs.zip`;
                            document.body.appendChild(a);
                            a.click();
                            a.remove();
                        } catch (error) {
                            console.error('Error during download:', error);
                            // Handle the error (e.g., display an error message to the user)
                        }
                    };

                    const deleteMonthLogs = async (year, month) => {
                        try {
                            const response = await fetch(`/logs/${year}/${month}`, { method: 'DELETE' });
                            if (response.ok) {
                                console.log('Logs for the month successfully deleted');
                                // Reload the page or remove the deleted items from DOM
                                location.reload();
                            }
                        } catch (error) {
                            console.error('Error deleting logs for the month:', error);
                        }
                    };

                    const deleteYearLogs = async (year) => {
                        try {
                            const response = await fetch(`/logs/${year}`, { method: 'DELETE' });
                            if (response.ok) {
                                console.log('Logs for the year successfully deleted');
                                // Reload the page or remove the deleted items from DOM
                                location.reload();
                            }
                        } catch (error) {
                            console.error('Error deleting logs for the year:', error);
                        }
                    };

                </script>

                <!-- ////////////// - BOTTOM PARTIALS - ////////////////-->

                <%- include('partials/bottomjs.ejs') %>